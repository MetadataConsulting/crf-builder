buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    group = 'org.modelcatalogue'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    repositories {
       jcenter()
    }

    dependencies {
        testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    }

    // don't forget to update version in CaseReportFormSerializer
    version = '3.2-rc1'

    jar {
        manifest.attributes provider: 'gradle'
    }



    // publishing
    publishing {
        publications {
            groovyMaven(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }

// set bintrayUser & bintrayKey in gradle.properties
    bintray {

        user = getPropertyOrUseDefault('bintrayUser', 'fake_user')
        key = getPropertyOrUseDefault('bintrayKey', 'fake_key')
        publications = ['groovyMaven']

        def projectName = project.name
        def projectDescription = project.description

        pkg {
            websiteUrl = 'https://github.com/MetadataRegistry/crf-builder'
            issueTrackerUrl = 'https://github.com/MetadataRegistry/crf-builder/issues'
            vcsUrl = 'https://github.com/MetadataRegistry/crf-builder.git'

            repo = 'model-catalogue' // or your repo name
            userOrg = 'metadata'
            name = projectName       // somehow project.* doesn't work in this closure
            desc = projectDescription
            licenses = ['Apache-2.0']
        }
        // dryRun = true // whether to run this as dry-run, without deploying
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }
}

String getPropertyOrUseDefault(String propertyName, String defaultValue) {
    hasProperty(propertyName) ? getProperty(propertyName) : defaultValue
}
